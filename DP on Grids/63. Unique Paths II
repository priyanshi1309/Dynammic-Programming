// -------------------------------------------------------------
// Leetcode 63: Unique Paths II
// https://leetcode.com/problems/unique-paths-ii/
// -------------------------------------------------------------
//
// INTUITION:
// The robot can only move **down** or **right** at any time, but there are obstacles in the grid
// represented by **1**. We need to find the number of unique paths to reach the bottom-right corner
// while avoiding obstacles.
//
// The problem can be solved using Dynamic Programming (DP). Let dp[i][j] be the number of unique ways
// to reach cell (i, j). The DP table can be built iteratively based on the previous row and column values.
//
// -------------------------------------------------------------

public class Solution {

    // -------------------------------------------------------------
    // 1. Tabulation Solution (Bottom-Up DP)
    // -------------------------------------------------------------
    public int UniquePathsWithObstacles(int[][] grid) {
        int m = grid.Length;
        int n = grid[0].Length;
        
        // Create DP table
        int[,] dp = new int[m, n];
        
        // If the starting cell is an obstacle, return 0 immediately
        if (grid[0][0] == 1) return 0;
        
        // Initialize the starting point
        dp[0, 0] = 1;
        
        // Fill the first column (can only move down if no obstacles)
        for (int i = 1; i < m; i++) {
            dp[i, 0] = (grid[i][0] == 0) ? dp[i - 1, 0] : 0;
        }
        
        // Fill the first row (can only move right if no obstacles)
        for (int j = 1; j < n; j++) {
            dp[0, j] = (grid[0][j] == 0) ? dp[0, j - 1] : 0;
        }
        
        // Fill the rest of the DP table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                // If there's no obstacle at (i, j), calculate the number of ways to reach it
                if (grid[i][j] == 0) {
                    dp[i, j] = dp[i - 1, j] + dp[i, j - 1];
                } else {
                    dp[i, j] = 0; // obstacle: no way to reach here
                }
            }
        }

        // Return the value in the bottom-right corner
        return dp[m - 1, n - 1];
    }

    // -------------------------------------------------------------
    // 2. Space Optimized Tabulation Solution (1D DP)
    // -------------------------------------------------------------
    public int UniquePathsWithObstaclesSpaceOptimized(int[][] grid) {
        int m = grid.Length;
        int n = grid[0].Length;
        
        // 1D array to store number of ways to reach each cell
        int[] dp = new int[n];
        
        // If the starting cell is an obstacle, return 0 immediately
        if (grid[0][0] == 1) return 0;
        
        // Initialize the first element of the first row
        dp[0] = 1;
        
        // Fill the first row (can only move right if no obstacles)
        for (int j = 1; j < n; j++) {
            dp[j] = (grid[0][j] == 0) ? dp[j - 1] : 0;
        }
        
        // Iterate over the rest of the grid
        for (int i = 1; i < m; i++) {
            // If there's an obstacle in the first column, set dp[0] to 0
            dp[0] = (grid[i][0] == 0) ? dp[0] : 0;
            
            // Update the dp array for each column in the row
            for (int j = 1; j < n; j++) {
                if (grid[i][j] == 0) {
                    dp[j] = dp[j] + dp[j - 1];
                } else {
                    dp[j] = 0; // obstacle: no way to reach here
                }
            }
        }

        // The result is stored in the last element of dp array
        return dp[n - 1];
    }
}



// -------------------------------------------------------------
// Summary of Approaches:
// -------------------------------------------------------------
// | Approach                   | Time Complexity | Space Complexity  |
// |----------------------------|-----------------|-------------------|
// | Tabulation (2D DP)         | O(m * n)        | O(m * n)          |
// | Space Optimized (1D DP)    | O(m * n)        | O(n)              |
// -------------------------------------------------------------
