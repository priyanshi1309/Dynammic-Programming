// -------------------------------------------------------------
// Leetcode 1137: N-th Tribonacci Number
// https://leetcode.com/problems/n-th-tribonacci-number/
// -------------------------------------------------------------

// ✅ 1. Pure Recursion (TLE on large input)
// Time Complexity: O(3^n)
// Space Complexity: O(n) – due to recursion stack
public class Solution1 {
    public int Tribonacci(int n) {
        if (n == 0) return 0;
        if (n <= 2) return 1;
        return Tribonacci(n - 1) + Tribonacci(n - 2) + Tribonacci(n - 3);
    }
}

// ✅ 2. Recursion with Memoization
// Time Complexity: O(n)
// Space Complexity: O(n)
public class Solution2 {
    public int Tribonacci(int n) {
        int[] memo = new int[Math.Max(n + 1, 3)];
        Array.Fill(memo, -1);
        memo[0] = 0;
        memo[1] = 1;
        memo[2] = 1;

        int Helper(int k) {
            if (memo[k] != -1) return memo[k];
            return memo[k] = Helper(k - 1) + Helper(k - 2) + Helper(k - 3);
        }

        return Helper(n);
    }
}

// ✅ 3. Tabulation (Bottom-Up DP)
// Time Complexity: O(n)
// Space Complexity: O(n)
public class Solution3 {
    public int Tribonacci(int n) {
        if (n == 0) return 0;
        if (n <= 2) return 1;

        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 1;

        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
        }

        return dp[n];
    }
}

// ✅ 4. Space Optimized DP
// Time Complexity: O(n)
// Space Complexity: O(1)
public class Solution4 {
    public int Tribonacci(int n) {
        if (n == 0) return 0;
        if (n <= 2) return 1;

        int a = 0, b = 1, c = 1;
        for (int i = 3; i <= n; i++) {
            int next = a + b + c;
            a = b;
            b = c;
            c = next;
        }

        return c;
    }
}
