// -------------------------------------------------------------
// Leetcode 198: House Robber
// https://leetcode.com/problems/house-robber/
// -------------------------------------------------------------

// ✅ 1. Pure Recursion (Not Recommended)
// Time Complexity: O(2^n) — exponential
// Space Complexity: O(n) — call stack depth
public class Solution1 {
    public int Rob(int[] nums) {
        return Helper(nums.Length - 1);

        int Helper(int idx) {
            if (idx < 0) return 0;
            return Math.Max(nums[idx] + Helper(idx - 2), Helper(idx - 1));
        }
    }
}

// ✅ 2. Recursion with Memoization (Top-Down DP)
// Time Complexity: O(n)
// Space Complexity: O(n) — recursion stack + memo array
public class Solution2 {
    public int Rob(int[] nums) {
        int n = nums.Length;
        int[] memo = new int[n];
        Array.Fill(memo, -1);
        return Helper(n - 1);

        int Helper(int idx) {
            if (idx < 0) return 0;
            if (memo[idx] != -1) return memo[idx];
            return memo[idx] = Math.Max(nums[idx] + Helper(idx - 2), Helper(idx - 1));
        }
    }
}

// ✅ 3. Tabulation (Bottom-Up DP)
// Time Complexity: O(n)
// Space Complexity: O(n)
public class Solution3 {
    public int Rob(int[] nums) {
        int n = nums.Length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = nums[0];

        for (int i = 2; i <= n; i++) {
            dp[i] = Math.Max(nums[i - 1] + dp[i - 2], dp[i - 1]);
        }

        return dp[n];
    }
}

// ✅ 4. Space Optimized DP
// Time Complexity: O(n)
// Space Complexity: O(1)
public class Solution4 {
    public int Rob(int[] nums) {
        int n = nums.Length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int twoStepBack = 0;
        int oneStepBack = nums[0];

        for (int i = 2; i <= n; i++) {
            int temp = oneStepBack;
            oneStepBack = Math.Max(nums[i - 1] + twoStepBack, oneStepBack);
            twoStepBack = temp;
        }

        return oneStepBack;
    }
}
