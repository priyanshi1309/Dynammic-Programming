using System;

public class FibonacciSolutions
{
    // 1. Recursive (Brute Force)
    public int FibonacciRecursive(int n)
    {
        if (n < 2) return n;
        return FibonacciRecursive(n - 1) + FibonacciRecursive(n - 2);
    }

    // 2. Top-Down DP with Memoization
    public int FibonacciMemoized(int n)
    {
        if (n < 2) return n;

        int[] memo = new int[n + 1];
        Array.Fill(memo, -1);
        memo[0] = 0;
        memo[1] = 1;

        return ComputeFibonacci(n);

        int ComputeFibonacci(int index)
        {
            if (memo[index] != -1) return memo[index];
            return memo[index] = ComputeFibonacci(index - 1) + ComputeFibonacci(index - 2);
        }
    }

    // 3. Bottom-Up DP (Tabulation)
    public int FibonacciTabulated(int n)
    {
        if (n < 2) return n;

        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;

        for (int i = 2; i <= n; i++)
        {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];
    }

    // 4. Bottom-Up DP with Space Optimization
    public int FibonacciOptimized(int n)
    {
        if (n < 2) return n;

        int prevPrev = 0;  // Fib(n-2)
        int prev = 1;      // Fib(n-1)

        for (int i = 2; i <= n; i++)
        {
            int current = prev + prevPrev;
            prevPrev = prev;
            prev = current;
        }

        return prev;
    }

   
}
