using System;
using System.Collections.Generic;

public class Solution
{
    // 1. **Recursive Solution (Brute Force)**
    public int CoinChangeRecursive(int[] coins, int amount)
    {
        int n = coins.Length;
        return Helper(n - 1, amount);

        int Helper(int idx, int target)
        {
            if (target == 0) return 0;
            if (idx < 0) return int.MaxValue;

            int notTake = Helper(idx - 1, target);
            int take = int.MaxValue;

            if (coins[idx] <= target)
            {
                int res = Helper(idx, target - coins[idx]);
                if (res != int.MaxValue)
                    take = 1 + res;
            }

            return Math.Min(notTake, take);
        }
    }

    // 2. **Top-Down DP (Memoization)**
    public int CoinChangeMemoized(int[] coins, int amount)
    {
        int n = coins.Length;
        var memo = new Dictionary<(int, int), int>();
        int result = Helper(n - 1, amount);
        return result == int.MaxValue ? -1 : result;

        int Helper(int idx, int target)
        {
            if (target == 0) return 0;
            if (idx < 0) return int.MaxValue;

            if (memo.ContainsKey((idx, target)))
                return memo[(idx, target)];

            int notTake = Helper(idx - 1, target);
            int take = int.MaxValue;

            if (coins[idx] <= target)
            {
                int res = Helper(idx, target - coins[idx]);
                if (res != int.MaxValue)
                    take = 1 + res;
            }

            memo[(idx, target)] = Math.Min(notTake, take);
            return memo[(idx, target)];
        }
    }

    // 3. **Bottom-Up DP (Tabulation)**
    public int CoinChangeTabulated(int[] coins, int amount)
    {
        int n = coins.Length;
        int[,] dp = new int[n + 1, amount + 1];

        // Initialize base cases
        for (int t = 0; t <= amount; t++)
        {
            dp[0, t] = int.MaxValue;  // No coins available to form a positive amount
        }
        dp[0, 0] = 0;  // Zero coins required to form amount zero

        for (int i = 1; i <= n; i++)
        {
            for (int t = 1; t <= amount; t++)
            {
                int notTake = dp[i - 1, t];
                int take = int.MaxValue;
                if (coins[i - 1] <= t)
                    take = 1 + dp[i, t - coins[i - 1]];

                dp[i, t] = Math.Min(notTake, take);
            }
        }

        return dp[n, amount] == int.MaxValue ? -1 : dp[n, amount];
    }

    // 4. **Space Optimized Bottom-Up DP**
    public int CoinChangeOptimized(int[] coins, int amount)
    {
        int n = coins.Length;
        int[] memo = new int[amount + 1];
        memo[0] = 0; // Base case: 0 coins to make amount 0

        for (int i = 1; i <= amount; i++)
        {
            memo[i] = i % coins[0] == 0 ? i / coins[0] : int.MaxValue;
        }

        for (int i = 1; i < n; i++)
        {
            int[] curr = new int[amount + 1];
            curr[0] = 0; // Base case: 0 coins to make amount 0
            for (int j = 1; j <= amount; j++)
            {
                int notTake = memo[j];
                int take = int.MaxValue;

                if (coins[i] <= j)
                {
                    int res = curr[j - coins[i]];
                    if (res != int.MaxValue)
                        take = 1 + res;
                }

                curr[j] = Math.Min(notTake, take);
            }
            memo = curr; // Update memo array with the current row
        }

        return memo[amount] == int.MaxValue ? -1 : memo[amount];
    }

    // **Main Method to Test**
    public static void Main()
    {
        Solution solver = new Solution();
        int[] coins = { 1, 2, 5 };
        int amount = 11;

        Console.WriteLine("Recursive: " + solver.CoinChangeRecursive(coins, amount));      // Output: 3 (5 + 5 + 1)
        Console.WriteLine("Memoized: " + solver.CoinChangeMemoized(coins, amount));      // Output: 3 (5 + 5 + 1)
        Console.WriteLine("Tabulated: " + solver.CoinChangeTabula
