// -------------------------------------------------------------
// Leetcode 1092: Shortest Common Supersequence
// https://leetcode.com/problems/shortest-common-supersequence/
// -------------------------------------------------------------
//
// INTUITION:
// A "supersequence" contains both strings as subsequences.
// To make it shortest, we should avoid repeating common parts.
// So, find the LCS (Longest Common Subsequence) of str1 and str2,
// then build the result by merging both strings around that LCS.
//
// APPROACH FLOW:
// -------------------------------------------------------------
// ➤ Step 1: Use DP to compute the LCS between str1 and str2
// ➤ Step 2: Traverse the DP table to reconstruct the result:
//    - If characters match → part of LCS → include once
//    - Else → add the non-matching character
// ➤ Step 3: Reverse the built string (since constructed backwards)
//
// Time Complexity: O(n * m)
// Space Complexity: O(n * m)
// -------------------------------------------------------------

public class Solution {
    public string ShortestCommonSupersequence(string str1, string str2) {
        int n = str1.Length;
        int m = str2.Length;

        // Step 1: Compute LCS using DP
        int[,] dp = new int[n + 1, m + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (str1[i - 1] == str2[j - 1])
                    dp[i, j] = 1 + dp[i - 1, j - 1];
                else
                    dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]);
            }
        }

        // Step 2: Reconstruct SCS from DP table
        StringBuilder scs = new StringBuilder();
        int x = n, y = m;

        while (x > 0 && y > 0) {
            if (str1[x - 1] == str2[y - 1]) {
                scs.Append(str1[x - 1]);
                x--;
                y--;
            } else if (dp[x - 1, y] > dp[x, y - 1]) {
                scs.Append(str1[x - 1]);
                x--;
            } else {
                scs.Append(str2[y - 1]);
                y--;
            }
        }

        // Append remaining characters (if any)
        while (x > 0) scs.Append(str1[--x]);
        while (y > 0) scs.Append(str2[--y]);

        // Result is built in reverse
        char[] result = scs.ToString().ToCharArray();
        Array.Reverse(result);

        return new string(result);
    }
}
