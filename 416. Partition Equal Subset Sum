using System;

public class PartitionEqualSubsetSum
{
    // 1. Recursive (Brute Force)
    public bool CanPartitionRecursive(int[] nums)
    {
        int sum = 0;
        foreach (int num in nums)
            sum += num;

        if (sum % 2 != 0) return false;

        int target = sum / 2;
        return Helper(nums.Length - 1, target);

        bool Helper(int idx, int remaining)
        {
            if (remaining == 0) return true;
            if (idx == 0) return nums[0] == remaining;

            bool skip = Helper(idx - 1, remaining);
            bool take = false;
            if (nums[idx] <= remaining)
                take = Helper(idx - 1, remaining - nums[idx]);

            return skip || take;
        }
    }

    // 2. Top-Down DP (Memoization)
    public bool CanPartitionMemoized(int[] nums)
    {
        int sum = 0;
        foreach (int num in nums)
            sum += num;

        if (sum % 2 != 0) return false;

        int target = sum / 2;
        int n = nums.Length;
        bool?[,] memo = new bool?[n, target + 1];

        return Helper(n - 1, target);

        bool Helper(int idx, int remaining)
        {
            if (remaining == 0) return true;
            if (idx == 0) return nums[0] == remaining;

            if (memo[idx, remaining].HasValue)
                return memo[idx, remaining].Value;

            bool skip = Helper(idx - 1, remaining);
            bool take = false;
            if (nums[idx] <= remaining)
                take = Helper(idx - 1, remaining - nums[idx]);

            memo[idx, remaining] = skip || take;
            return memo[idx, remaining].Value;
        }
    }

    // 3. Bottom-Up DP (Tabulation)
    public bool CanPartitionTabulated(int[] nums)
    {
        int sum = 0;
        foreach (int num in nums)
            sum += num;

        if (sum % 2 != 0) return false;

        int target = sum / 2;
        int n = nums.Length;
        bool[,] dp = new bool[n, target + 1];

        for (int i = 0; i < n; i++)
            dp[i, 0] = true;

        if (nums[0] <= target)
            dp[0, nums[0]] = true;

        for (int i = 1; i < n; i++)
        {
            for (int j = 1; j <= target; j++)
            {
                bool skip = dp[i - 1, j];
                bool take = false;
                if (nums[i] <= j)
                    take = dp[i - 1, j - nums[i]];
                dp[i, j] = skip || take;
            }
        }

        return dp[n - 1, target];
    }

    // 4. Bottom-Up DP (Space Optimized)
    public bool CanPartitionOptimized(int[] nums)
    {
        int sum = 0;
        foreach (int num in nums)
            sum += num;

        if (sum % 2 != 0) return false;

        int target = sum / 2;
        int n = nums.Length;
        bool[] dp = new bool[target + 1];

        dp[0] = true;
        if (nums[0] <= target)
            dp[nums[0]] = true;

        for (int i = 1; i < n; i++)
        {
            bool[] curr = new bool[target + 1];
            curr[0] = true;

            for (int j = 1; j <= target; j++)
            {
                bool skip = dp[j];
                bool take = false;
                if (nums[i] <= j)
                    take = dp[j - nums[i]];
                curr[j] = skip || take;
            }

            dp = curr;
        }

        return dp[target];
    }

   
}
